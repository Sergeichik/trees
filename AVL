template <typename T>
class AVL
{
   struct node // структура для представления узлов дерева
{
	T key;
	unsigned char height;
	node* left;
	node* right;
	node(T k) { key = k; left = right = 0; height = 1; }
};
    node* root;
unsigned char height(node* p)
{
	return p?p->height:0;
}

T bfactor(node* p)
{
	return height(p->right)-height(p->left);
}

void fixheight(node* p)
{
	unsigned char hl = height(p->left);
	unsigned char hr = height(p->right);
	p->height = (hl>hr?hl:hr)+1;
}

node* rotateright(node* p) // правый поворот вокруг p
{
	node* q = p->left;
	p->left = q->right;
	q->right = p;
	fixheight(p);
	fixheight(q);
	return q;
}

node* rotateleft(node* q) // левый поворот вокруг q
{
	node* p = q->right;
	q->right = p->left;
	p->left = q;
	fixheight(q);
	fixheight(p);
	return p;
}

node* balance(node* p) // балансировка узла p
{
	fixheight(p);
	if( bfactor(p)==2 )
	{
		if( bfactor(p->right) < 0 )
			p->right = rotateright(p->right);
		return rotateleft(p);
	}
	if( bfactor(p)==-2 )
	{
		if( bfactor(p->left) > 0  )
			p->left = rotateleft(p->left);
		return rotateright(p);
	}
	return p; // балансировка не нужна
}

node* insert(node* p, T k) // вставка ключа k в дерево с корнем p
{
	if( !p ) return new node(k);
	if( k<p->key )
		p->left = insert(p->left,k);
	else
		p->right = insert(p->right,k);
	return balance(p);
}

node* findmin(node* p) // поиск узла с минимальным ключом в дереве p 
{
	return p->left?findmin(p->left):p;
}

node* removemin(node* p) // удаление узла с минимальным ключом из дерева p
{
	if( p->left==0 )
		return p->right;
	p->left = removemin(p->left);
	return balance(p);
}

node* erase(node* p, T k) // удаление ключа k из дерева p
{
	if( !p ) return 0;
	if( k < p->key )
		p->left = erase(p->left,k);
	else if( k > p->key )
		p->right = erase(p->right,k);	
	else //  k == p->key 
	{
		node* q = p->left;
		node* r = p->right;
		delete p;
		if( !r ) return q;
		node* min = findmin(r);
		min->right = removemin(r);
		min->left = q;
		return balance(min);
	}
	return balance(p);
}
 bool find(node* p, T k) 
{ 
    // Traverse untill root reaches to dead end 
    while (p != NULL) { 
        // pass right subtree as new tree 
        if (k > p->key) 
            p = p->right; 

        // pass left subtree as new tree 
        else if (k < p->key) 
            p = p->left; 
        else
            return true; // if the key is found return 1 
    } 
    return false; 
} 
 void inorder(node* t)
    {
        if(t == NULL)
            return;
        inorder(t->left);
        std::cout << t->key << " ";
        inorder(t->right);
    }

public:
    AVL()
    {
        root = NULL;
    }

    void insert(T x)
    {
        root = insert(root, x);
    }

    void erase(T x)
    {
        root = erase(root, x);
    }

    bool find(T x)
    {
        return find(root, x);
    }
        void display()
    {
        inorder(root);
        std::cout << std::endl;
    }
};

